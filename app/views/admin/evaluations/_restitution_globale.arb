# frozen_string_literal: true

if can?(:manage, Compte) && !pdf
  panel 'Scores niveau 2' do
    scores_niveau2 = restitution_globale.scores_niveau2.calcule
    moyennes_glissantes = restitution_globale.niveau2_moyennes_glissantes
    ecarts_types_glissants = restitution_globale.niveau2_ecarts_types_glissants
    scores_niveau2_standardises = restitution_globale.scores_niveau2_standardises.calcule
    attributes_table_for [
      [t('admin.restitutions.restitution_colonnes.valeur_utilisateur'), scores_niveau2],
      [t('admin.restitutions.restitution_colonnes.moyenne_glissante'), moyennes_glissantes],
      [t('admin.restitutions.restitution_colonnes.ecart_type_glissant'), ecarts_types_glissants],
      [t('admin.restitutions.restitution_colonnes.cote_z'), scores_niveau2_standardises]
    ] do
      row do |(titre, _)|
        strong titre
      end
      Restitution::ScoresNiveau2::METRIQUES_ILLETRISME.each do |nom_metrique|
        row(nom_metrique) do |(_, valeur_colonne)|
          valeur_colonne[nom_metrique]&.round(2)
        end
      end
    end

    h2 'Interpr√©tations'
    restitution_globale.interpretations_niveau2.each do |competence_niveau|
      competence = competence_niveau.keys.first
      niveau = competence_niveau[competence]
      scope = "admin.restitutions.interpretations_niveau2.#{competence}"
      h3 t(:titre, scope: scope)
      div do
        if niveau.present?
          md t(niveau, scope: scope)
        else
          md t('admin.restitutions.pas_de_score')
        end
      end
      hr
    end
  end

  panel 'Scores niveau 1' do
    scores_niveau1 = restitution_globale.scores_niveau1.calcule
    moyennes_glissantes = restitution_globale.niveau1_moyennes_glissantes
    ecarts_types_glissants = restitution_globale.niveau1_ecarts_types_glissants
    scores_niveau1_standardises = restitution_globale.scores_niveau1_standardises.calcule
    attributes_table_for [
      [t('admin.restitutions.restitution_colonnes.valeur_utilisateur'), scores_niveau1],
      [t('admin.restitutions.restitution_colonnes.moyenne_glissante'), moyennes_glissantes],
      [t('admin.restitutions.restitution_colonnes.ecart_type_glissant'), ecarts_types_glissants],
      [t('admin.restitutions.restitution_colonnes.cote_z'), scores_niveau1_standardises]
    ] do
      row do |(titre, _)|
        strong titre
      end
      scores_niveau1.each_key do |nom_metrique|
        row(nom_metrique) do |(_, valeur_colonne)|
          valeur_colonne[nom_metrique]&.round(2)
        end
      end
    end
  end
end

div class: 'admin_restitution_globale' do
  render 'entete_page', restitution_globale: restitution_globale, pdf: pdf

  h2 class: 'text-center titre-classement-competences' do
    span t('.competences_fortes_titre')
    br
    span class: 'legende-titre' do
      t('.legende_titre')
    end
  end

  div class: 'row saut-de-page' do
    rang_competence = 0
    valeur_competence_precedente = -1
    restitution_globale.niveaux_competences.each do |niveau_competence|
      competence = niveau_competence.keys.first
      if valeur_competence_precedente != niveau_competence.values.first
        rang_competence += 1
        valeur_competence_precedente = niveau_competence.values.first
      end
      ul class: 'competences-identifiees col-12' do
        div class: 'identification-competence col-6' do
          div class: "jauge jauge-#{rang_competence}"
          if pdf
            span wicked_pdf_image_tag competence.to_s
          else
            span image_tag competence
          end
          span class: 'nom-competence' do
            t("#{competence}.nom", scope: 'admin.evaluations.restitution_competence')
          end
        end

        div class: 'description-competence col-6' do
          div t("#{competence}.description",
                scope: 'admin.evaluations.restitution_competence')
          url_competence = "#{URL_COMPETENCES_SITE_VITRINE}#{competence}/"
          a href: url_competence, target: '_blank' do
            if pdf
              t('.url_competence') + ' ' + url_competence
            else
              div t('.url_competence')
              div url_competence
            end
          end
        end
      end
    end
  end

  div class: 'saut-de-page' do
    render 'entete_page', restitution_globale: restitution_globale, pdf: pdf

    div class: 'synthese-illettrisme' do
      restitution_globale.interpretations_niveau1.each do |competence_niveau|
        competence = competence_niveau.keys.first
        niveau = competence_niveau[competence]
        scope = "admin.restitutions.niveaux_illettrisme.#{competence}"

        div class: 'row' do
          div class: 'col col-auto' do
            div class: 'synthese-illettrisme-illustration' do
              if pdf
                span wicked_pdf_image_tag competence.to_s
              else
                span image_tag competence
              end
            end
          end
          div class: 'col' do
            h2 do
              div t(:titre, scope: scope)
              if niveau.present?
                div class: 'synthese-illettrisme-niveau' do
                  if competence == :socle_clea
                    span t('admin.restitutions.niveaux_illettrisme.socle_clea.niveau')
                  else
                    span t('admin.restitutions.niveaux_illettrisme.niveau', niveau: niveau.upcase)
                  end
                end
              end
            end

            div do
              if niveau.present?
                md t(niveau, scope: scope)
              else
                md t('admin.restitutions.pas_de_score')
              end
            end
          end
        end
      end
    end
  end

  render 'entete_page', restitution_globale: restitution_globale, pdf: pdf
  restitution_globale.restitutions.each do |restitution|
    situation = restitution.situation
    next unless %w[questions livraison].include?(situation.nom_technique)

    render 'questions', { restitution: restitution, situation_libelle: situation.libelle }
  end
end
