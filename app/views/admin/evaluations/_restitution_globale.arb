# frozen_string_literal: true

if can?(:manage, Compte) && !pdf
  panel 'Scores niveau 2' do
    scores_niveau2 = restitution_globale.scores_niveau2.calcule
    moyennes_glissantes = restitution_globale.niveau2_moyennes_glissantes
    ecarts_types_glissants = restitution_globale.niveau2_ecarts_types_glissants
    scores_niveau2_standardises = restitution_globale.scores_niveau2_standardises.calcule
    attributes_table_for [
      [t('admin.restitutions.restitution_colonnes.valeur_utilisateur'), scores_niveau2],
      [t('admin.restitutions.restitution_colonnes.moyenne_glissante'), moyennes_glissantes],
      [t('admin.restitutions.restitution_colonnes.ecart_type_glissant'), ecarts_types_glissants],
      [t('admin.restitutions.restitution_colonnes.cote_z'), scores_niveau2_standardises]
    ] do
      row do |(titre, _)|
        strong titre
      end
      Restitution::ScoresNiveau2::METRIQUES_ILLETRISME.each do |nom_metrique|
        row(nom_metrique) do |(_, valeur_colonne)|
          valeur_colonne[nom_metrique]&.round(2)
        end
      end
    end
  end
  panel 'Scores niveau 1' do
    scores_niveau1 = restitution_globale.scores_niveau1.calcule
    moyennes_glissantes = restitution_globale.niveau1_moyennes_glissantes
    ecarts_types_glissants = restitution_globale.niveau1_ecarts_types_glissants
    scores_niveau1_standardises = restitution_globale.scores_niveau1_standardises.calcule
    attributes_table_for [
      [t('admin.restitutions.restitution_colonnes.valeur_utilisateur'), scores_niveau1],
      [t('admin.restitutions.restitution_colonnes.moyenne_glissante'), moyennes_glissantes],
      [t('admin.restitutions.restitution_colonnes.ecart_type_glissant'), ecarts_types_glissants],
      [t('admin.restitutions.restitution_colonnes.cote_z'), scores_niveau1_standardises]
    ] do
      row do |(titre, _)|
        strong titre
      end
      scores_niveau1.each_key do |nom_metrique|
        row(nom_metrique) do |(_, valeur_colonne)|
          valeur_colonne[nom_metrique]&.round(2)
        end
      end
    end
  end
  panel 'Interpr√©tations' do
    restitution_globale.interpretations_illettrisme.each do |niveau|
      scope = "admin.restitutions.niveaux_illettrisme.#{niveau}"
      h3 t(:titre, scope: scope)
      div do
        md t(:description, scope: scope)
      end
      hr
    end
  end
end

div class: 'admin_restitution_globale' do
  div class: 'en-tete' do
    div class: 'eva-logo' do
      span wicked_pdf_image_tag 'eva-logo.svg' if pdf
    end
    div class: 'identite' do
      div class: 'date-restitution' do
        l restitution_globale.date, format: :restitution
      end
      div class: 'nom-evalue' do
        strong restitution_globale.utilisateur
      end
    end
  end

  h2 class: 'text-center titre-classement-competences' do
    span t('.competences_fortes_titre')
    br
    span class: 'legende-titre' do
      t('.legende_titre')
    end
  end

  div class: 'row saut-de-page' do
    rang_competence = 0
    valeur_competence_precedente = -1
    restitution_globale.niveaux_competences.each do |niveau_competence|
      competence = niveau_competence.keys.first
      if valeur_competence_precedente != niveau_competence.values.first
        rang_competence += 1
        valeur_competence_precedente = niveau_competence.values.first
      end
      ul class: 'competences-identifiees col-12' do
        div class: 'identification-competence col-6' do
          div class: "jauge jauge-#{rang_competence}"
          if pdf
            span wicked_pdf_image_tag competence.to_s
          else
            span image_tag competence
          end
          span class: 'nom-competence' do
            t("#{competence}.nom", scope: 'admin.evaluations.restitution_competence')
          end
        end

        div class: 'description-competence col-6' do
          div t("#{competence}.description",
                scope: 'admin.evaluations.restitution_competence')
          url_competence = "#{URL_COMPETENCES_SITE_VITRINE}#{competence}/"
          a href: url_competence, target: '_blank' do
            if pdf
              t('.url_competence') + ' ' + url_competence
            else
              div t('.url_competence')
              div url_competence
            end
          end
        end
      end
    end
  end

  restitution_globale.restitutions.each do |restitution|
    situation = restitution.situation
    next if situation.nom_technique == Restitution::Bienvenue::NOM_TECHNIQUE

    panel t('.situation', situation: situation.libelle) do
      begin
        render situation.nom_technique, restitution: restitution
      rescue ActionView::MissingTemplate
        nil
      end
      render 'restitution_competences', restitution: restitution
    end
  end
end
